"use strict";(()=>{var e={};e.id=216,e.ids=[216],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},7746:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>h,patchFetch:()=>m,requestAsyncStorage:()=>l,routeModule:()=>d,serverHooks:()=>x,staticGenerationAsyncStorage:()=>g});var n={};t.r(n),t.d(n,{GET:()=>p});var s=t(3278),a=t(5002),i=t(4877),o=t(3524),u=t(1309);let c=new o.PrismaClient;async function p(e){let{searchParams:r}=new URL(e.url),t=r.get("accountId");if(!t)return u.NextResponse.json({error:"Account ID is required"},{status:400});try{let e=await c.transactionAll.findMany({include:{account:!0},where:{accountId:parseInt(t)},orderBy:{date:"desc"}});return u.NextResponse.json(e)}catch(e){return console.error("Error fetching transactions:",e),u.NextResponse.json({error:"Error fetching transactions"},{status:500})}finally{await c.$disconnect()}}let d=new s.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/transbyid/route",pathname:"/api/transbyid",filename:"route",bundlePath:"app/api/transbyid/route"},resolvedPagePath:"/Users/gustistudio/Dev/gdps/gdps-c3/src/app/api/transbyid/route.js",nextConfigOutput:"",userland:n}),{requestAsyncStorage:l,staticGenerationAsyncStorage:g,serverHooks:x}=d,h="/api/transbyid/route";function m(){return(0,i.patchFetch)({serverHooks:x,staticGenerationAsyncStorage:g})}}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),n=r.X(0,[379,833],()=>t(7746));module.exports=n})();