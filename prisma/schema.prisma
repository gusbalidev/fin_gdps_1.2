generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "windows"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id               Int               @id @default(autoincrement())
  code             String            @unique @db.VarChar(16)
  name             String
  accountTypeId    Int
  accountGroupId   Int
  accountGroup2Id  Int
  balance1         Float             @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accountGroup2    AccountGroup2     @relation(fields: [accountGroup2Id], references: [id])
  accountGroup     AccountGroup      @relation(fields: [accountGroupId], references: [id])
  accountType      AccountType       @relation(fields: [accountTypeId], references: [id])
  JournalDetail    JournalDetail[]
  transactions     Transaction[]
  transactionMains TransactionMain[]
  transactionAlls  TransactionAll[]

  @@index([accountGroup2Id], map: "Account_accountGroup2Id_fkey")
  @@index([accountGroupId], map: "Account_accountGroupId_fkey")
  @@index([accountTypeId], map: "Account_accountTypeId_fkey")
}

model AccountType {
  id       Int       @id @default(autoincrement())
  flag     String
  name     String    @unique
  accounts Account[]
}

model AccountGroup {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  flag     String
  accounts Account[]
}

model AccountGroup2 {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  flag     String
  accounts Account[]
}

model Tag {
  id               Int                  @id @default(autoincrement())
  name             String               @unique
  flag             String
  transactionAlls  TransactionAllTag[]
  transactionMains TransactionMainTag[]
  transactions     TransactionTag[]
}

model TransactionMainTag {
  id                Int             @id @default(autoincrement())
  transactionMainId Int
  tagId             Int
  tag               Tag             @relation(fields: [tagId], references: [id])
  transactionMain   TransactionMain @relation(fields: [transactionMainId], references: [id])

  @@unique([transactionMainId, tagId])
  @@index([tagId], map: "TransactionMainTag_tagId_fkey")
}

model TransactionTag {
  id            Int         @id @default(autoincrement())
  transactionId Int
  tagId         Int
  tag           Tag         @relation(fields: [tagId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@unique([transactionId, tagId])
  @@index([tagId], map: "TransactionTag_tagId_fkey")
}

model TransactionAllTag {
  id               Int @id @default(autoincrement())
  transactionAllId Int
  tagId            Int
  tag              Tag @relation(fields: [tagId], references: [id])

  @@unique([transactionAllId, tagId])
  @@index([tagId], map: "TransactionAllTag_tagId_fkey")
}

model TransactionMain {
  id           Int                  @id @default(autoincrement())
  date         DateTime             @default(now())
  description  String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  ref          String               @default("")
  accountId    Int
  transactions Transaction[]
  account      Account              @relation(fields: [accountId], references: [id])
  tags         TransactionMainTag[]

  @@index([accountId], map: "TransactionMain_accountId_fkey")
}

model Transaction {
  id            Int              @id @default(autoincrement())
  date          DateTime         @default(now())
  description   String
  ref           String           @default("")
  mediaPath     String           @default("")
  debit         Float            @default(0)
  credit        Float            @default(0)
  accountId     Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  transactionId Int
  account       Account          @relation(fields: [accountId], references: [id])
  transaction   TransactionMain  @relation(fields: [transactionId], references: [id])
  tags          TransactionTag[]

  @@index([accountId], map: "Transaction_accountId_fkey")
  @@index([transactionId], map: "Transaction_transactionId_fkey")
}

model TransactionAll {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  description String
  ref         String   @default("")
  mediaPath   String   @default("")
  debit       Float    @default(0)
  credit      Float    @default(0)
  accountId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  flag        String   @default("")
  account     Account  @relation(fields: [accountId], references: [id])

  @@index([accountId], map: "Transaction_accountId_fkey")
}

model JournalEntry {
  id          Int             @id @default(autoincrement())
  date        DateTime        @default(now())
  description String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  entries     JournalDetail[]
}

model JournalDetail {
  id             Int          @id @default(autoincrement())
  journalEntryId Int
  accountId      Int
  ref            String       @default("")
  mediaPath      String       @default("")
  debit          Float        @default(0)
  credit         Float        @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  account        Account      @relation(fields: [accountId], references: [id])
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id])

  @@index([accountId], map: "JournalDetail_accountId_fkey")
  @@index([journalEntryId], map: "JournalDetail_journalEntryId_fkey")
}
